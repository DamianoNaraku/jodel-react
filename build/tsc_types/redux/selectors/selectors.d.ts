import { AttribETypes, DClassifier, DGraph, DGraphElement, DRefEdge, DState, DVoidVertex, LClass, LEnumerator, LGraphElement, LModel, LModelElement, LObject, LValue, LViewElement, LViewPoint, LVoidVertex, Pointer, ShortAttribETypes } from "../../joiner";
import { DViewElement, DPointerTargetable, DModel, DModelElement, LPointerTargetable } from "../../joiner";
import { DefaultEClasses, ShortDefaultEClasses } from "../../common/U";
import { NodeTransientProperties } from "../../joiner/classes";
export declare class Selectors {
    static getActiveModel(): null | LModel;
    static getLastSelectedModel<RET extends {
        m1?: LModel;
        m2?: LModel;
        model?: LModel;
        element?: LModelElement;
    }>(state?: DState): RET;
    static getAllViewElements(state0?: DState): DViewElement[];
    static getViewpoints(): LViewPoint[];
    static getViewpoint(): LViewPoint;
    static getObjects(): LObject[];
    static getValues(): LValue[];
    static getDeleted(): string[];
    static getState(): any;
    static getDefaultEcoreClass(type: DefaultEClasses | ShortDefaultEClasses, state?: DState): DClassifier;
    static getPrimitiveType(type: AttribETypes | ShortAttribETypes, state?: DState): DClassifier;
    static getAllPrimitiveTypes(): DClassifier[];
    static getFirstPrimitiveTypes(): DClassifier;
    static getRefEdges(): DRefEdge[];
    static getField(field: string): string[];
    static getAllAttributes(): string[];
    static getAllEnumLiterals(): string[];
    static getAllReferences(): string[];
    static getAllClasses(): string[];
    static getReturnTypes(): LClass[];
    static getAllClassesWithoutPrimitive(): string[];
    static getAllEnumerators(flag?: boolean): string[];
    static getAllPackages(): string[];
    static getAllParameters(): string[];
    static getAllOperations(): string[];
    static getDElement<T extends DModelElement>(pointer: string): T;
    static getAllMetamodels(): LModel[];
    static getAllModels(): LModel[];
    static getVertex<W extends boolean = true, RP extends boolean = true>(wrap?: W, resolvePointers?: RP): W extends false ? (RP extends false ? Pointer<DVoidVertex, 1, 1, LVoidVertex>[] : DVoidVertex[]) : LVoidVertex[];
    static getAll<D extends DPointerTargetable, L extends LPointerTargetable, DT extends typeof DPointerTargetable = typeof DPointerTargetable, W extends undefined | true | false = false, RP extends undefined | true | false = true, RET = W extends false ? (RP extends false ? Pointer<D, 1, 1, L> : D) : L>(Classe?: DT, condition?: (e: RET) => boolean, state?: DState, resolvePointers?: RP, wrap?: W): RET[];
    static getModel(name: string, caseSensitive?: boolean, wrap?: boolean): DModel | LModel | null;
    static getByName(classe: typeof DPointerTargetable, name: string, caseSensitive?: boolean, wrap?: boolean): DPointerTargetable | LPointerTargetable | null;
    static getByField(classe: typeof DPointerTargetable, field: string, value: string, caseSensitive?: boolean, wrap?: boolean): DPointerTargetable | LPointerTargetable | null;
    static getViewIDs(condition?: (m: DModel) => boolean): Pointer<DViewElement>[];
    private static queryJS;
    private static matchesMetaClassTarget;
    private static isOfSubclass;
    static getViewByIDOrNameD(name: string | DViewElement | LViewElement, state?: DState): undefined | DViewElement;
    static getViewIdFromName(namepath: string, state?: DState): undefined | Pointer<DViewElement>;
    private static getQueryComplexity;
    static getAllGraphElementPointers(): Pointer<DGraphElement>[];
    static updateViewMatchings2(dview: DViewElement, updatePreconditions: boolean, updateOCLScore: boolean, store: DState, updateManualViews?: boolean, forcedUpdateViews?: boolean): void;
    static getAppliedViewsNew({ data: data0, node, pv, nid }: {
        node: LGraphElement | undefined;
        data: LModelElement | undefined;
        pv: DViewElement | undefined;
        nid: Pointer<DGraphElement>;
    }): NodeTransientProperties;
    static getAllMP(state?: DState): DModelElement[];
    static toObject<D extends DPointerTargetable>(ptrs: Pointer<D>[], state?: DState): D[];
    static wrap<D extends DPointerTargetable, L extends LPointerTargetable>(arr: (Pointer<D, 1, 1, L> | D)[], state?: DState): L[];
    static unwrap<D extends DPointerTargetable, L extends LPointerTargetable>(arr: L[]): D[];
    static getSubNodeElements(forGraph: Pointer<DGraph, 1, 1>, asPointers?: boolean, wrap?: boolean): Pointer<DGraphElement>[] | DGraphElement[] | LGraphElement[];
    static getAllPackageClasses(id: string): LClass[];
    static getAllPackageEnumerators(id: string): LEnumerator[];
}
