import { CoordinateMode, DGraphElement, Dictionary, DModelElement, DocString, DPointerTargetable, DViewPoint, EdgeBendingMode, EdgeGapMode, getWParams, GObject, GraphPoint, GraphSize, Info, LModelElement, LogicContext, LPointerTargetable, LViewPoint, Pointer, RuntimeAccessibleClass } from "../../joiner";
export declare class DViewElement extends DPointerTargetable {
    static subclasses: (typeof RuntimeAccessibleClass | string)[];
    static _extends: (typeof RuntimeAccessibleClass | string)[];
    static MeasurableKeys: string[];
    static RecompileKeys: string[];
    id: Pointer<DViewElement, 1, 1, LViewElement>;
    name: string;
    isExclusiveView: boolean;
    constants?: string;
    preRenderFunc: string;
    jsxString: string;
    usageDeclarations?: string;
    forceNodeType?: DocString<'component name (Vertex, Field, GraphVertex, Graph)'>;
    scalezoomx: boolean;
    scalezoomy: boolean;
    storeTemporaryPositions: boolean;
    appliableToClasses: string[];
    appliableTo: 'node' | 'edge' | 'edgePoint';
    subViews: Pointer<DViewElement, 0, 'N', LViewElement>;
    allSubViews: Pointer<DViewElement, 0, 'N', LViewElement>;
    oclCondition: string;
    jsCondition: string;
    oclUpdateCondition: DocString<(view: LViewElement) => boolean>;
    OCL_NEEDS_RECALCULATION: boolean;
    OCL_UPDATE_NEEDS_RECALCULATION: boolean;
    explicitApplicationPriority: number;
    defaultVSize: GraphSize;
    adaptHeight: boolean;
    adaptWidth: boolean;
    width: number;
    height: number;
    draggable: boolean;
    resizable: boolean;
    viewpoint: Pointer<DViewPoint>;
    display: 'block' | 'contents' | 'flex' | string;
    onDataUpdate: string;
    onDragStart: string;
    onDragEnd: string;
    whileDragging: string;
    onResizeStart: string;
    onResizeEnd: string;
    whileResizing: string;
    onRotationStart: string;
    onRotationEnd: string;
    whileRotating: string;
    bendingMode: EdgeBendingMode;
    edgeGapMode: EdgeGapMode;
    storeSize: boolean;
    size: Dictionary<Pointer<DModelElement> | Pointer<DGraphElement>, GraphSize>;
    lazySizeUpdate: boolean;
    edgeStartOffset: GraphPoint;
    edgeEndOffset: GraphPoint;
    edgeStartOffset_isPercentage: boolean;
    edgeEndOffset_isPercentage: boolean;
    edgeStartStopAtBoundaries: boolean;
    edgeEndStopAtBoundaries: boolean;
    edgePointCoordMode: CoordinateMode;
    edgeHeadSize: GraphPoint;
    edgeTailSize: GraphPoint;
    palette: Dictionary<DocString<"palette prefix">, DocString<"colors like #4fc">[]>;
    css: string;
    cssIsGlobal: boolean;
    compiled_css: string;
    css_MUST_RECOMPILE: boolean;
    static new(name: string, jsxString: string, defaultVSize?: GraphSize, usageDeclarations?: string, constants?: string, preRenderFunc?: string, appliableToClasses?: string[], oclCondition?: string, priority?: number, persist?: boolean, isDefaultView?: boolean, vp?: Pointer<DViewPoint>): DViewElement;
    static new2(name: string, jsxString: string, callback?: (d: DViewElement) => void, persist?: boolean, vp?: Pointer<DViewPoint>, id?: string): DViewElement;
}
export declare class LViewElement<Context extends LogicContext<DViewElement, LViewElement> = any, D extends DViewElement = any> extends LPointerTargetable {
    static subclasses: (typeof RuntimeAccessibleClass | string)[];
    static _extends: (typeof RuntimeAccessibleClass | string)[];
    __raw: DViewElement;
    id: Pointer<DViewElement, 1, 1, LViewElement>;
    name: string;
    __info_of__name: Info;
    isOverlay: boolean;
    __info_of__isOverlay: Info;
    get_isOverlay(c: Context): this["isOverlay"];
    set_isOverlay(val: this["isOverlay"], c: Context): boolean;
    isExclusiveView: boolean;
    __info_of__isExclusiveView: Info;
    get_isExclusiveView(c: Context): this["isExclusiveView"];
    set_isExclusiveView(val: this["isExclusiveView"], c: Context): boolean;
    constants?: string;
    __info_of__constants: Info;
    preRenderFunc?: string;
    __info_of__preRenderFunc: Info;
    protected _defaultGetter(c: Context, k: keyof Context["data"]): any;
    protected _defaultSetter(v: any, c: Context, k: keyof Context["data"]): any;
    jsxString: string;
    __info_of__jsxString: Info;
    protected get_jsxString(context: Context): this['jsxString'];
    protected set_jsxString(val: this['jsxString'], context: Context): boolean;
    usageDeclarations?: string;
    __info_of__usageDeclarations: Info;
    protected get_usageDeclarations(c: Context): this["usageDeclarations"];
    protected set_usageDeclarations(val: this['usageDeclarations'], context: Context): boolean;
    oclUpdateCondition: (oldData: LModelElement, newData: LModelElement) => boolean;
    __info_of__oclUpdateCondition: Info;
    get_oclUpdateCondition(c: Context): this["oclUpdateCondition"];
    set_oclUpdateCondition(val: DocString<"function">, c: Context): boolean;
    private css_MUST_RECOMPILE;
    cssIsGlobal: boolean;
    __info_of__cssIsGlobal: Info;
    get_cssIsGlobal(c: Context): this["cssIsGlobal"];
    set_cssIsGlobal(val: this["cssIsGlobal"], c: Context): boolean;
    css: string;
    __info_of__css: Info;
    get_css(c: Context): this["css"];
    set_css(val: this["css"], c: Context): boolean;
    compiled_css: string;
    __info_of__compiled_css: Info;
    get_compiled_css(c: Context): this["compiled_css"];
    set_compiled_css(val: this["compiled_css"], c: Context): boolean;
    palette: Dictionary<DocString<"palette prefix">, DocString<"colors like #4fc">[]>;
    __info_of__palette: Info;
    get_palette(c: Context): this["palette"];
    set_palette(val: this["palette"], c: Context): boolean;
    forceNodeType?: DocString<'component name'>;
    __info_of__forceNodeType: Info;
    zoom: GraphPoint;
    __info_of__zoom: Info;
    appliableToClasses: string[];
    __info_of__appliableToClasses: Info;
    appliableTo: 'node' | 'edge' | 'edgePoint';
    subViews: LViewElement[];
    __info_of__subViews: Info;
    allSubViews: LViewElement[];
    __info_of__allSubViews: Info;
    get_allSubViews(c: Context): this["allSubViews"];
    set_allSubViews(val: this["allSubViews"], c: Context): boolean;
    explicitApplicationPriority: number;
    __info_of__explicitApplicationPriority: Info;
    defaultVSize: GraphSize;
    __info_of__defaultVSize: Info;
    adaptWidth: boolean;
    __info_of__adaptWidth: Info;
    adaptHeight: boolean;
    __info_of__adaptHeight: Info;
    draggable: boolean;
    __info_of__draggable: Info;
    resizable: boolean;
    __info_of__resizable: Info;
    oclCondition: string;
    __info_of__oclCondition: Info;
    protected get_oclCondition(context: Context): this['oclCondition'];
    set_oclCondition(val: string, context: Context): boolean;
    jsCondition: string;
    __info_of__jsCondition: Info;
    protected get_jsCondition(context: Context): this['jsCondition'];
    set_jsCondition(val: string, context: Context): boolean;
    viewpoint: LViewPoint;
    __info_of__viewpoint: Info;
    display: 'block' | 'contents';
    __info_of__display: Info;
    onDragStart: string;
    __info_of__onDragStart: Info;
    protected get_onDragStart(context: Context): this['onDragStart'];
    protected set_onDragStart(val: this['onDragStart'], context: Context): boolean;
    onDragEnd: string;
    __info_of__onDragEnd: Info;
    protected get_onDragEnd(context: Context): this['onDragEnd'];
    protected set_onDragEnd(val: this['onDragEnd'], context: Context): boolean;
    whileDragging: string;
    __info_of__whileDragging: Info;
    protected get_whileDragging(context: Context): this['whileDragging'];
    protected set_whileDragging(val: this['whileDragging'], context: Context): boolean;
    onResizeStart: string;
    __info_of__onResizeStart: Info;
    protected get_onResizeStart(context: Context): this['onResizeStart'];
    protected set_onResizeStart(val: this['onResizeStart'], context: Context): boolean;
    onResizeEnd: string;
    __info_of__onResizeEnd: Info;
    protected get_onResizeEnd(context: Context): this['onResizeEnd'];
    protected set_onResizeEnd(val: this['onResizeEnd'], context: Context): boolean;
    whileResizing: string;
    __info_of__whileResizing: Info;
    protected get_whileResizing(context: Context): this['whileResizing'];
    protected set_whileResizing(val: this['whileResizing'], context: Context): boolean;
    onRotationStart: string;
    __info_of__onRotationStart: Info;
    protected get_onRotationStart(context: Context): this['onRotationStart'];
    protected set_onRotationStart(val: this['onRotationStart'], context: Context): boolean;
    onRotationEnd: string;
    __info_of__onRotationEnd: Info;
    protected get_onRotationEnd(context: Context): this['onRotationEnd'];
    protected set_onRotationEnd(val: this['onRotationEnd'], context: Context): boolean;
    whileRotating: string;
    __info_of__whileRotating: Info;
    protected get_whileRotating(context: Context): this['whileRotating'];
    protected set_whileRotating(val: this['whileRotating'], context: Context): boolean;
    onDataUpdate: string;
    __info_of__onDataUpdate: Info;
    protected get_onDataUpdate(context: Context): this['onDataUpdate'];
    protected set_onDataUpdate(val: this['onDataUpdate'], context: Context): boolean;
    constraints: GObject<"todo, used in Vertex. they are triggered by events (view.onDragStart....) and can bound the size of the vertex">[];
    __info_of__constraints: Info;
    bendingMode: EdgeBendingMode;
    __info_of__bendingMode: Info;
    edgeGapMode: EdgeGapMode;
    __info_of__edgeGapMode: Info;
    storeSize: boolean;
    __info_of__storeSize: Info;
    lazySizeUpdate: boolean;
    __info_of__lazySizeUpdate: Info;
    edgeStartOffset: GraphPoint;
    __info_of__edgeStartOffset: Info;
    edgeEndOffset: GraphPoint;
    __info_of__edgeEndOffset: Info;
    edgeStartOffset_isPercentage: boolean;
    __info_of__edgeStartOffset_isPercentage: Info;
    edgeEndOffset_isPercentage: boolean;
    __info_of__edgeEndOffset_isPercentage: Info;
    edgeStartStopAtBoundaries: boolean;
    __info_of__edgeStartStopAtBoundaries: Info;
    edgeEndStopAtBoundaries: boolean;
    __info_of__edgeEndStopAtBoundaries: Info;
    edgePointCoordMode: CoordinateMode;
    __info_of__edgePointCoordMode: Info;
    edgeHeadSize: GraphPoint;
    __info_of__edgeHeadSize: Info;
    edgeTailSize: GraphPoint;
    __info_of__edgeTailSize: Info;
    protected size: Dictionary<Pointer<DModelElement> | Pointer<DGraphElement>, GraphSize>;
    __info_of__size: Info;
    __info_of__updateSize: Info;
    __info_of__getSize: Info;
    get_constants(c: Context): this['constants'];
    static parseConstants(funcCode?: string): GObject | undefined;
    set_constants(value: this['constants'], c: Context): boolean;
    get_preRenderFunc(c: Context): this['preRenderFunc'];
    set_preRenderFunc(value: this['preRenderFunc'], c: Context): boolean;
    get_edgeHeadSize(c: Context): this["edgeHeadSize"];
    get_edgeTailSize(c: Context): this["edgeTailSize"];
    set_edgeHeadSize(v: Partial<this["edgeHeadSize"]>, c: Context): boolean;
    set_edgeTailSize(v: Partial<this["edgeTailSize"]>, c: Context): boolean;
    get_viewpoint(context: Context): this["viewpoint"];
    set_subViews(v: Pointer<DViewPoint>[], context: Context): boolean;
    set_viewpoint(v: Pointer<DViewPoint>, context: Context, manualDview?: DViewElement, atIndex?: number): boolean;
    get_subViews(context: Context, key: string): LViewElement[];
    updateSize(id: Pointer<DModelElement> | Pointer<DGraphElement>, size: Partial<GraphSize>): boolean;
    get_updateSize(context: Context): this["updateSize"];
    get_defaultVSize(context: Context): this["defaultVSize"];
    getSize(id: Pointer<DModelElement> | Pointer<DGraphElement>): GraphSize | undefined;
    get_getSize(context: Context): ((...a: Parameters<this["getSize"]>) => ReturnType<LViewElement["getSize"]>);
    set_generic_entry(context: Context, key: keyof DViewElement, val: any): boolean;
    get_children(context: Context): never[];
    get_lazySizeUpdate(context: Context): D["lazySizeUpdate"];
    set_lazySizeUpdate(val: D["lazySizeUpdate"], context: Context): boolean;
    get_bendingMode(context: Context): D["bendingMode"];
    set_bendingMode(val: D["bendingMode"], context: Context): boolean;
    get_appliableToClasses(context: Context): this["appliableToClasses"];
    set_appliableToClasses(val: this["appliableToClasses"], context: Context): boolean;
    set_defaultVSize(val: GraphSize, context: Context): boolean;
    duplicate(deep?: boolean): this;
    protected get_duplicate(c: Context): ((deep?: boolean) => LViewElement);
}
export declare type WViewElement = getWParams<LViewElement, DPointerTargetable>;
export declare class DViewTransientProperties extends RuntimeAccessibleClass {
    static logic: typeof LPointerTargetable;
    _isDViewTransientProperties: true;
}
export declare class LViewTransientProperties extends LPointerTargetable {
    static structure: typeof DPointerTargetable;
    static singleton: LViewTransientProperties;
    _isLViewTransientProperties: true;
}
export declare type WViewTransientProperties = getWParams<LViewTransientProperties, DViewTransientProperties>;
