
.SaveManager {

  position: absolute;
  left: 5%;
  top: 5%;
  border: 1px solid black;
  display: inline-block;
}
.hoverable{
  position: relative;
}
.hoverable:hover>.preview{ display: none; }
.hoverable:hover>.content{ display: block; position: absolute; z-index:1;}
.hoverable>.content{ display: none; }

[data-nodetype]{
  position: relative;
  overflow: hidden;
}

.GraphVertex[data-nodetype="GraphVertex"],
.Vertex[data-nodetype="Vertex"],
.VoidVertex[data-nodetype="VoidVertex"],
.EdgePoint[data-nodetype="EdgePoint"]{
  position: absolute;
}

.ui-draggable-dragging{ visibility: hidden; }

.REACT-ROOT.debug{
  [data-nodetype]{
    &:hover{ overflow: visible; }
    &:hover::after{
      content: attr(data-nodetype);
      position: absolute;
      top: -23px;
      left: 0;
      background: red;
      padding: 0 4px;
      color: white;
      z-index: 100000;
    }
  }
  [data-nodetype="Field"]:hover::after {
      top: unset !important;
      left: -45px;
      float: left;
      // margin-top: -23px;
    }
}

.lazySizeUpdate.ui-draggable-dragging,
.REACT-ROOT.debug,
.ui-draggable-dragging,
.REACT_ROOT { visibility: visible; }

body .ui-icon{ // override jqueryui fixed resizable handles at 16px, making drag for small elements impossible.
  max-width: 33%;
  max-height: 33%;
}
[data-nodetype="Graph"]{
  position: absolute !important;
  overflow: hidden !important;
  &:hover{ overflow: hidden; }
  height: -webkit-fill-available;
  width: -webkit-fill-available;
  &::after{
    content: '';
  }
}
[data-nodetype="Vertex"], [data-nodetype="VertexGraph"]{
  position: absolute !important;
}


[data-nodetype="GraphVertex"] {
  width: 50%;
  height: 50%;
}
[data-nodetype="Field"] {
  white-space: nowrap;
  // overflow: hidden;
  // &:hover{ overflow: visible; }
}
[data-nodetype="Graph"]::after {
  top: 0px;
  left: 0px;
}
/*
*:has(>[data-nodetype]){
  display: flex;
  flex-wrap: wrap;
  flex-direction: column;
  // counter-reset: line-number-mycounter 0;
}

[data-nodetype]{
  // counter-increment: line-number-mycounter 1;
  //noinspection CssInvalidPropertyValue
  // order: counter(line-number-mycounter);
  //noinspection CssInvalidPropertyValue
  order: attr(data-order);
}*/

//////////// edge paths

svg.hoverable {

  path{
    pointer-events: visiblestroke;
  }
  &:has(path.clickable) {
    &>.preview { visibility: visible; }
    &>.content { visibility: hidden; }
  }

  &:hover:has(path.clickable) {
    &>.preview { visibility: hidden; }
    &>.content { visibility: visible; }
  }

}
// .EdgePoint[data-nodetype="EdgePoint"]>
// [data-nodetype]:has(>[hoverscale]){ overflow: visible !important; }
[hoverscale]:hover, [hoverscale]:focus-within, [hoverscale]:focus{
  transform-origin: center;
  transform: scale(1.3);
  // todo: temp fix to avoid double trigger because root attributes are duplicated, remove when attributes cloning is fixed
  &>[hoverscale]:hover, [hoverscale]:focus-within, [hoverscale]:focus{ transform: scale(1); }
  // transform: scale(attr(hoverscale number, 1)); correct but unsupported yet. i'm forced to hardcode a number
}

//.EdgePoint{ transform: translate(-50%, -50%); }

